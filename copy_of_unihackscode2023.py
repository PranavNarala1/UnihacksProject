# -*- coding: utf-8 -*-
"""Copy of UnihacksCode2023.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UQ5GwQtqAcAF2kD4oQw15xPXNPGfw5ca
"""

#!unzip '/content/ind_pd_2020_1km_ASCII_XYZ.zip'

import pandas as pd
import numpy as np

#Reading in population distribution data
population_dist = pd.read_csv('/content/out.csv')
population_dist.head(20)

len(population_dist)

#Filter out rows not in the region of analysis


population_dist = population_dist[population_dist['Y'] >= 17.782307] 
population_dist = population_dist[population_dist['Y'] <= 24.106277] 
population_dist = population_dist[population_dist['X'] >= 80.244428] #Longitude
population_dist = population_dist[population_dist['X'] <= 84.395551]
population_dist = population_dist.reset_index()



#Latitude - y

population_dist.head()

len(population_dist)

from sklearn.cluster import KMeans
import pandas as pd

hospital_coords = pd.read_csv('/content/popular_hospitals_Chhattisgarh.csv')
hospital_coords['Radius'] = (hospital_coords['Popularity'] / np.max(np.array(hospital_coords['Popularity'])))*2
hospital_coords.head()

X = []

import math

#5 miles
# One degree of latitude equals approximately 364,000 feet (69 miles)
# I will remove everything within 20 miles of the hospital

for x in range(len(population_dist)):
  close = False
  for hospital in range(len(hospital_coords)):
    if math.sqrt((hospital_coords['Latitude'][hospital] - population_dist['Y'][x])**2 + (hospital_coords['Longitude'][hospital] - population_dist['X'][x])**2) < ((hospital_coords['Radius'][hospital]) * (1 / 69) / 30): # 1/ 69 is for converting from miles to lat, long.
      close = True

  if close:
    continue
  for y in range(int(population_dist['Z'][x])):
    X.append([population_dist['X'][x], population_dist['Y'][x]])

X = np.array(X)

Y = []

import math

# One degree of latitude equals approximately 364,000 feet (69 miles)
# I will remove everything within 20 miles of the hospital

for x in range(len(population_dist)):
  for y in range(int(population_dist['Z'][x] / 50)):
    Y.append([population_dist['X'][x], population_dist['Y'][x]])

Y = np.array(Y)

len(X)

len(Y)

from sklearn.cluster import KMeans
import numpy as np

num_hospitals = 3

kmeans = KMeans(n_clusters=3, random_state=0).fit(X)

print(kmeans.cluster_centers_)

kmeans.cluster_centers_

import folium


m = folium.Map(location=[24.286006+2,83.320216+2], zoom_start=7)

for hospital in kmeans.cluster_centers_: #kmeans.cluster_centers_
    print([hospital[1], hospital[0]])
    marker = folium.Marker(location=[hospital[1], hospital[0]], popup='Proposed Hospital', icon=folium.Icon(color='red', icon_color='white', icon='glyphicon glyphicon-heart-empty')) #popup=company['label']
    marker.add_to(m)
    folium.Circle(location=[hospital[1], hospital[0]], fill_color='red', radius=1570, weight=2, color="red").add_to(m) #Multiplied by 1000 for scaling


for x in range(len(hospital_coords)): #kmeans.cluster_centers_
    marker = folium.Marker(location=[hospital_coords['Latitude'][x], hospital_coords['Longitude'][x]], popup=hospital_coords['Name'][x], icon=folium.Icon(color='blue', icon_color='white', icon='glyphicon glyphicon-heart-empty'))
    marker.add_to(m)
    folium.Circle(location=[hospital_coords['Latitude'][x], hospital_coords['Longitude'][x]], fill_color='blue', radius=hospital_coords['Radius'][x]*1500, weight=2, color="blue").add_to(m)


folium.Rectangle([(17.782307,80.244428), (24.106277,84.395551)], fill_color="green", color="green", weight=1).add_to(m)



m

m.save("index_Chhattisgarh.html")